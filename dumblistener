#!/usr/bin/env perl
use strict;
use warnings;

our $VERSION = '0.01';

use Data::Dumper;$Data::Dumper::Useqq = 1;
use FindBin;
use lib
	"$FindBin::Bin/../lib",
	glob("$FindBin::Bin/../libs/*/lib"),
	glob("$FindBin::Bin/../libs/*/blib/lib"),
	glob("$FindBin::Bin/../libs/*/blib/arch"),
;
use Daemond::Lite;
use EV;
use AnyEvent;
use AnyEvent::Socket;
use AnyEvent::Handle;

name     'dumblistener';
config   './dumblistener.conf';
children 1;
pid      '%n.%u.pid';


sub check {
	my $self = shift;
}

sub start {
	my $self = shift;
	$self->log->debug("Daemon starting");
}

sub run {
	my $self = shift;

	my $conn_id=1;
	my %connection;

	my $guard = tcp_server('127.0.0.1', 44777, sub {
			my ($fh, $host, $port) = @_;
			my $id = $conn_id++;
			$connection{$id} =  { 
					rw => AnyEvent->io(fh=> $fh, poll=>'r', cb=> sub { 
						my $bytes = sysread($fh, my $message, 2048);
						if ($bytes) {
							$self->log->error("Client [$id $host:$port] sent this: $message" )
						#} elsif (defined $bytes) { 
						#	$self->log->info("[watcher] Connection closed for $id $host:$port");	
						#	delete $connection{$id};
						} else {
							$self->log->error("[watcher] Read error for [$id $host:$port]: $!");	
							delete $connection{$id};
							my $clients_connected = scalar keys %connection;
							$self->log->info( "[$clients_connected] connected clients left" );
						}
					}
				)
			};
			my $clients_connected = scalar keys %connection;
			$self->log->info( "[$clients_connected] Got connection [$id] from $host:$port" );
		}
	);

	#my $t; $t= AE::timer 0, 1, sub { 
	#	my $clients_connected = scalar keys %connection;
	#	$self->log->info("I currently have $clients_connected clients connected");
	#};

	$self->log->info('Starting daemon worker');

	EV::loop();
	warn "$$ gone $!";
}

sub stop {
	my $self = shift;
	$self->log->error("Child $$ exiting");
	EV::unloop();
	return;
}

runit();
1
